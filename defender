I'll help you create a bash script to install the Microsoft Defender for Cloud agent (formerly Azure Security Center) across multiple Azure VMs. Here's the script:

```bash
#!/bin/bash

# Script to install Microsoft Defender agent on multiple Azure VMs
# Usage: ./install_defender_azure.sh -f VM_LIST -r RESOURCE_GROUP [-s SUBSCRIPTION_ID] [-u SSH_USER] [-k SSH_KEY]

# Default values
VM_LIST=""
RESOURCE_GROUP=""
SUBSCRIPTION_ID=""
SSH_USER="azureuser"  # Default Azure Linux user
SSH_KEY=""
DEFENDER_EXTENSION_NAME="AzureSecurityLinuxAgent"

# Function to display usage
usage() {
    echo "Usage: $0 -f VM_LIST -r RESOURCE_GROUP [-s SUBSCRIPTION_ID] [-u SSH_USER] [-k SSH_KEY]"
    echo "Options:"
    echo "  -f VM_LIST          File containing VM names"
    echo "  -r RESOURCE_GROUP   Azure resource group name"
    echo "  -s SUBSCRIPTION_ID  Azure subscription ID (optional)"
    echo "  -u SSH_USER         SSH username (default: azureuser)"
    echo "  -k SSH_KEY          Path to SSH private key"
    exit 1
}

# Parse command line arguments
while getopts "f:r:s:u:k:h" opt; do
    case $opt in
        f) VM_LIST="$OPTARG";;
        r) RESOURCE_GROUP="$OPTARG";;
        s) SUBSCRIPTION_ID="$OPTARG";;
        u) SSH_USER="$OPTARG";;
        k) SSH_KEY="$OPTARG";;
        h) usage;;
        ?) usage;;
    esac
done

# Check required parameters
if [ -z "$VM_LIST" ] || [ -z "$RESOURCE_GROUP" ]; then
    echo "Error: Missing required parameters"
    usage
fi

# Check if Azure CLI is installed
if ! command -v az &> /dev/null; then
    echo "Error: Azure CLI is not installed. Please install it first."
    exit 1
fi

# Check if logged into Azure
if ! az account show &> /dev/null; then
    echo "Error: Not logged into Azure. Please run 'az login' first."
    exit 1
fi

# Set subscription if provided
if [ ! -z "$SUBSCRIPTION_ID" ]; then
    echo "Setting subscription to $SUBSCRIPTION_ID"
    az account set --subscription "$SUBSCRIPTION_ID"
fi

# Function to get VM public IP
get_vm_ip() {
    local vm_name=$1
    az vm list-ip-addresses \
        --resource-group "$RESOURCE_GROUP" \
        --name "$vm_name" \
        --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" \
        --output tsv
}

# Function to check if Defender agent is installed
check_defender_agent() {
    local vm_name=$1
    az vm extension list \
        --resource-group "$RESOURCE_GROUP" \
        --vm-name "$vm_name" \
        --query "[?name=='$DEFENDER_EXTENSION_NAME'].name" \
        --output tsv
}

# Function to install Defender agent on a single VM
install_defender_agent() {
    local vm_name=$1
    local ssh_user=$2
    local ssh_key=$3

    echo "Installing Defender agent on VM $vm_name..."

    # Check if agent is already installed
    if [ ! -z "$(check_defender_agent "$vm_name")" ]; then
        echo "Defender agent is already installed on $vm_name"
        return 0
    fi

    # Get VM public IP
    local vm_ip=$(get_vm_ip "$vm_name")
    if [ -z "$vm_ip" ]; then
        echo "Error: Could not get public IP for VM $vm_name"
        return 1
    fi

    # Prepare SSH command
    local ssh_cmd="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    if [ ! -z "$ssh_key" ]; then
        ssh_cmd="$ssh_cmd -i $ssh_key"
    fi
    ssh_cmd="$ssh_cmd $ssh_user@$vm_ip"

    # Prepare installation commands
    local install_commands="
        # Check OS type
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=\$NAME
        else
            echo 'Error: Could not determine OS type'
            exit 1
        fi

        # Install dependencies based on OS
        if [[ \$OS == *\"Ubuntu\"* ]] || [[ \$OS == *\"Debian\"* ]]; then
            sudo apt-get update
            sudo apt-get install -y curl apt-transport-https lsb-release gnupg
        elif [[ \$OS == *\"CentOS\"* ]] || [[ \$OS == *\"RHEL\"* ]]; then
            sudo yum install -y curl
        else
            echo 'Unsupported OS: \$OS'
            exit 1
        fi

        # Install Microsoft Defender agent
        if [[ \$OS == *\"Ubuntu\"* ]] || [[ \$OS == *\"Debian\"* ]]; then
            # Add Microsoft repository
            curl -s https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            sudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ \$(lsb_release -cs) main\"
            sudo apt-get update
            sudo apt-get install -y azure-security
        elif [[ \$OS == *\"CentOS\"* ]] || [[ \$OS == *\"RHEL\"* ]]; then
            # Add Microsoft repository
            sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
            sudo sh -c 'echo -e \"[azure-cli]\\nname=Azure CLI\\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/azure-cli.repo'
            sudo yum install -y azure-security
        fi

        # Start and enable the service
        sudo systemctl enable azure-security
        sudo systemctl start azure-security

        # Verify installation
        if systemctl is-active --quiet azure-security; then
            echo 'Microsoft Defender agent installed and running successfully'
        else
            echo 'Microsoft Defender agent installation may have failed'
            exit 1
        fi
    "

    # Execute installation
    $ssh_cmd "$install_commands"

    # Check installation status
    if [ $? -eq 0 ]; then
        echo "Successfully installed Defender agent on VM $vm_name"
        
        # Verify extension installation through Azure CLI
        echo "Verifying extension installation through Azure CLI..."
        az vm extension set \
            --resource-group "$RESOURCE_GROUP" \
            --vm-name "$vm_name" \
            --name "$DEFENDER_EXTENSION_NAME" \
            --publisher "Microsoft.Azure.Security" \
            --version "1.0" \
            --no-wait
    else
        echo "Failed to install Defender agent on VM $vm_name"
    fi
}

# Main script execution
echo "Starting Microsoft Defender agent installation..."

# Read VM list
if [ ! -f "$VM_LIST" ]; then
    echo "Error: VM list file not found: $VM_LIST"
    exit 1
fi

# Process each VM
while IFS= read -r vm_name || [ -n "$vm_name" ]; do
    # Skip empty lines and comments
    [[ -z "$vm_name" || "$vm_name" =~ ^[[:space:]]*# ]] && continue
    
    # Trim whitespace
    vm_name=$(echo "$vm_name" | xargs)
    
    echo "Processing VM: $vm_name"
    
    # Check if VM exists and is running
    vm_state=$(az vm show \
        --resource-group "$RESOURCE_GROUP" \
        --name "$vm_name" \
        --query "powerState" \
        --output tsv 2>/dev/null)
    
    if [ "$vm_state" == "VM running" ]; then
        install_defender_agent "$vm_name" "$SSH_USER" "$SSH_KEY"
    else
        echo "Warning: VM $vm_name is not running (state: $vm_state)"
    fi
done < "$VM_LIST"

echo "Installation process completed"
```

To use this script:

1. Save it as `install_defender_azure.sh`

2. Make it executable:
```bash
chmod +x install_defender_azure.sh
```

3. Create a text file (e.g., `azure_vms.txt`) containing your Azure VM names, one per line:
```
vm1
vm2
vm3
```

4. Run the script with the required parameters:
```bash
./install_defender_azure.sh -f azure_vms.txt -r your-resource-group
```

Optional parameters:
- `-s SUBSCRIPTION_ID`: Azure subscription ID
- `-u SSH_USER`: SSH username (default: azureuser)
- `-k SSH_KEY`: Path to SSH private key

Features of this script:
1. Supports both Debian/Ubuntu and RHEL/CentOS based systems
2. Uses Azure CLI for VM management and extension installation
3. Automatically detects the OS type and installs appropriate packages
4. Verifies if the agent is already installed
5. Includes error handling and logging
6. Checks VM state before attempting installation
7. Verifies the agent is running after installation
8. Installs the Azure VM extension for Defender

Prerequisites:
1. Azure CLI installed and configured
2. Logged into Azure (`az login`)
3. SSH access to target VMs
4. Sudo privileges on target VMs
5. VMs must have internet access to download packages

Important notes:
1. The script assumes:
   - VMs are running and accessible
   - Network security groups allow SSH access
   - VMs have internet access to download packages
2. For security best practices:
   - Use managed identities where possible
   - Use SSH keys instead of passwords
   - Consider using Azure Automation for more secure deployment
3. The script creates a systemd service for automatic startup and management

Would you like me to modify the script for any specific requirements or add additional features? For example, I could add:
1. Support for Azure Automation instead of direct SSH
2. Additional configuration options for Defender
3. Support for more Linux distributions
4. Backup of existing Defender installation if present
5. Support for custom Defender workspace configuration
